//
//  StyleKitName.m
//  ProjectName
//
//  Created by AuthorName on 5/7/14.
//  Copyright (c) 2014 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Cache

static UIColor* _gradientColor = nil;
static UIColor* _gradientColor2 = nil;

static PCGradient* _gradient = nil;
static PCGradient* _gradient2 = nil;
static PCGradient* _gradient6 = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _gradientColor = [UIColor colorWithRed: 0.781 green: 0.781 blue: 0.781 alpha: 1];
    _gradientColor2 = [UIColor colorWithRed: 0.439 green: 0.439 blue: 0.439 alpha: 1];

    // Gradients Initialization
    CGFloat gradientLocations[] = {0, 1};
    _gradient = [PCGradient gradientWithColors: @[StyleKit.gradientColor, StyleKit.gradientColor2] locations: gradientLocations];
    CGFloat gradient2Locations[] = {0, 0.77, 1};
    _gradient2 = [PCGradient gradientWithColors: @[UIColor.whiteColor, [UIColor colorWithRed: 0.504 green: 1 blue: 0.5 alpha: 1], _gradientColor] locations: gradient2Locations];
    CGFloat gradient6Locations[] = {0, 1};
    _gradient6 = [PCGradient gradientWithColors: @[UIColor.lightGrayColor, UIColor.darkGrayColor] locations: gradient6Locations];

}

#pragma mark Colors

+ (UIColor*)gradientColor { return _gradientColor; }
+ (UIColor*)gradientColor2 { return _gradientColor2; }

#pragma mark Gradients

+ (PCGradient*)gradient { return _gradient; }
+ (PCGradient*)gradient2 { return _gradient2; }
+ (PCGradient*)gradient6 { return _gradient6; }

#pragma mark Drawing Methods

+ (void)drawCanvas1;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* gradient5Color = [UIColor colorWithRed: 1 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat gradient5Locations[] = {0, 0.72, 1};
    PCGradient* gradient5 = [PCGradient gradientWithColors: @[UIColor.whiteColor, [UIColor colorWithRed: 1 green: 0.5 blue: 0.5 alpha: 1], gradient5Color] locations: gradient5Locations];

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1, 0, 320, 100)];
    CGContextSaveGState(context);
    [ovalPath addClip];
    CGContextDrawLinearGradient(context, gradient5.CGGradient, CGPointMake(1, 50), CGPointMake(321, 50), 0);
    CGContextRestoreGState(context);


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(287.29, 64.29)];
    [bezierPath addCurveToPoint: CGPointMake(287.29, 36.71) controlPoint1: CGPointMake(294.9, 56.67) controlPoint2: CGPointMake(294.9, 44.33)];
    [bezierPath addCurveToPoint: CGPointMake(259.71, 36.71) controlPoint1: CGPointMake(279.67, 29.1) controlPoint2: CGPointMake(267.33, 29.1)];
    [bezierPath addCurveToPoint: CGPointMake(259.71, 64.29) controlPoint1: CGPointMake(252.1, 44.33) controlPoint2: CGPointMake(252.1, 56.67)];
    [bezierPath addCurveToPoint: CGPointMake(287.29, 64.29) controlPoint1: CGPointMake(267.33, 71.9) controlPoint2: CGPointMake(279.67, 71.9)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(254.11, 31)];
    [bezierPath addLineToPoint: CGPointMake(43.76, 31)];
    [bezierPath addCurveToPoint: CGPointMake(35.68, 31.67) controlPoint1: CGPointMake(39.8, 31) controlPoint2: CGPointMake(37.82, 31)];
    [bezierPath addCurveToPoint: CGPointMake(30.67, 36.68) controlPoint1: CGPointMake(33.36, 32.52) controlPoint2: CGPointMake(31.52, 34.36)];
    [bezierPath addLineToPoint: CGPointMake(30.59, 37.03)];
    [bezierPath addCurveToPoint: CGPointMake(30, 44.76) controlPoint1: CGPointMake(30, 38.82) controlPoint2: CGPointMake(30, 40.8)];
    [bezierPath addLineToPoint: CGPointMake(30, 56.24)];
    [bezierPath addCurveToPoint: CGPointMake(30.67, 64.32) controlPoint1: CGPointMake(30, 60.2) controlPoint2: CGPointMake(30, 62.18)];
    [bezierPath addCurveToPoint: CGPointMake(35.68, 69.33) controlPoint1: CGPointMake(31.52, 66.64) controlPoint2: CGPointMake(33.36, 68.48)];
    [bezierPath addLineToPoint: CGPointMake(36.03, 69.41)];
    [bezierPath addCurveToPoint: CGPointMake(43.76, 70) controlPoint1: CGPointMake(37.82, 70) controlPoint2: CGPointMake(39.8, 70)];
    [bezierPath addLineToPoint: CGPointMake(254.11, 70)];
    [bezierPath addCurveToPoint: CGPointMake(292.95, 69.95) controlPoint1: CGPointMake(264.85, 80.68) controlPoint2: CGPointMake(282.22, 80.67)];
    [bezierPath addCurveToPoint: CGPointMake(292.95, 31.05) controlPoint1: CGPointMake(303.68, 59.21) controlPoint2: CGPointMake(303.68, 41.79)];
    [bezierPath addCurveToPoint: CGPointMake(254.11, 31) controlPoint1: CGPointMake(282.22, 20.33) controlPoint2: CGPointMake(264.85, 20.32)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(321, 1)];
    [bezierPath addCurveToPoint: CGPointMake(321, 101) controlPoint1: CGPointMake(321, 1) controlPoint2: CGPointMake(321, 101)];
    [bezierPath addLineToPoint: CGPointMake(1, 101)];
    [bezierPath addLineToPoint: CGPointMake(1, 1)];
    [bezierPath addLineToPoint: CGPointMake(321, 1)];
    [bezierPath addLineToPoint: CGPointMake(321, 1)];
    [bezierPath closePath];
    CGContextSaveGState(context);
    [bezierPath addClip];
    CGContextDrawLinearGradient(context, StyleKit.gradient6.CGGradient, CGPointMake(161, 1), CGPointMake(161, 101), 0);
    CGContextRestoreGState(context);
    [UIColor.lightGrayColor setStroke];
    bezierPath.lineWidth = 1.5;
    [bezierPath stroke];
}

+ (void)drawCanvas2;
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1, 1, 318, 100)];
    CGContextSaveGState(context);
    [ovalPath addClip];
    CGContextDrawLinearGradient(context, StyleKit.gradient2.CGGradient, CGPointMake(76.64, -32.36), CGPointMake(243.36, 134.36), 0);
    CGContextRestoreGState(context);
    [UIColor.lightGrayColor setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(287.29, 64.29)];
    [bezierPath addCurveToPoint: CGPointMake(287.29, 36.71) controlPoint1: CGPointMake(294.9, 56.67) controlPoint2: CGPointMake(294.9, 44.33)];
    [bezierPath addCurveToPoint: CGPointMake(259.71, 36.71) controlPoint1: CGPointMake(279.67, 29.1) controlPoint2: CGPointMake(267.33, 29.1)];
    [bezierPath addCurveToPoint: CGPointMake(259.71, 64.29) controlPoint1: CGPointMake(252.1, 44.33) controlPoint2: CGPointMake(252.1, 56.67)];
    [bezierPath addCurveToPoint: CGPointMake(287.29, 64.29) controlPoint1: CGPointMake(267.33, 71.9) controlPoint2: CGPointMake(279.67, 71.9)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(254.11, 31)];
    [bezierPath addLineToPoint: CGPointMake(43.76, 31)];
    [bezierPath addCurveToPoint: CGPointMake(35.68, 31.67) controlPoint1: CGPointMake(39.8, 31) controlPoint2: CGPointMake(37.82, 31)];
    [bezierPath addCurveToPoint: CGPointMake(30.67, 36.68) controlPoint1: CGPointMake(33.36, 32.52) controlPoint2: CGPointMake(31.52, 34.36)];
    [bezierPath addLineToPoint: CGPointMake(30.59, 37.03)];
    [bezierPath addCurveToPoint: CGPointMake(30, 44.76) controlPoint1: CGPointMake(30, 38.82) controlPoint2: CGPointMake(30, 40.8)];
    [bezierPath addLineToPoint: CGPointMake(30, 56.24)];
    [bezierPath addCurveToPoint: CGPointMake(30.67, 64.32) controlPoint1: CGPointMake(30, 60.2) controlPoint2: CGPointMake(30, 62.18)];
    [bezierPath addCurveToPoint: CGPointMake(35.68, 69.33) controlPoint1: CGPointMake(31.52, 66.64) controlPoint2: CGPointMake(33.36, 68.48)];
    [bezierPath addLineToPoint: CGPointMake(36.03, 69.41)];
    [bezierPath addCurveToPoint: CGPointMake(43.76, 70) controlPoint1: CGPointMake(37.82, 70) controlPoint2: CGPointMake(39.8, 70)];
    [bezierPath addLineToPoint: CGPointMake(254.11, 70)];
    [bezierPath addCurveToPoint: CGPointMake(292.95, 69.95) controlPoint1: CGPointMake(264.85, 80.68) controlPoint2: CGPointMake(282.22, 80.67)];
    [bezierPath addCurveToPoint: CGPointMake(292.95, 31.05) controlPoint1: CGPointMake(303.68, 59.21) controlPoint2: CGPointMake(303.68, 41.79)];
    [bezierPath addCurveToPoint: CGPointMake(254.11, 31) controlPoint1: CGPointMake(282.22, 20.33) controlPoint2: CGPointMake(264.85, 20.32)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(321, 1)];
    [bezierPath addCurveToPoint: CGPointMake(321, 101) controlPoint1: CGPointMake(321, 1) controlPoint2: CGPointMake(321, 101)];
    [bezierPath addLineToPoint: CGPointMake(1, 101)];
    [bezierPath addLineToPoint: CGPointMake(1, 1)];
    [bezierPath addLineToPoint: CGPointMake(321, 1)];
    [bezierPath addLineToPoint: CGPointMake(321, 1)];
    [bezierPath closePath];
    CGContextSaveGState(context);
    [bezierPath addClip];
    CGContextDrawLinearGradient(context, StyleKit.gradient6.CGGradient, CGPointMake(161, 1), CGPointMake(161, 101), 0);
    CGContextRestoreGState(context);
    [UIColor.lightGrayColor setStroke];
    bezierPath.lineWidth = 1.5;
    [bezierPath stroke];
}

@end



@interface PCGradient ()
{
    CGGradientRef _CGGradient;
}
@end

@implementation PCGradient

- (instancetype)initWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    self = super.init;
    if (self)
    {
        CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
        NSMutableArray* cgColors = NSMutableArray.array;
        for (UIColor* color in colors)
            [cgColors addObject: (id)color.CGColor];

        _CGGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)cgColors, locations);
        CGColorSpaceRelease(colorSpace);
    }
    return self;
}

+ (instancetype)gradientWithColors: (NSArray*)colors locations: (const CGFloat*)locations
{
    return [self.alloc initWithColors: colors locations: locations];
}

+ (instancetype)gradientWithStartingColor: (UIColor*)startingColor endingColor: (UIColor*)endingColor
{
    CGFloat locations[] = {0, 1};
    return [self.alloc initWithColors: @[startingColor, endingColor] locations: locations];
}

- (void)dealloc
{
    CGGradientRelease(_CGGradient);
}

@end
